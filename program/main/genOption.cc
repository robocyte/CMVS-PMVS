#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>

int main(int argc, char* argv[])
{
    if (argc < 2)
    {
        std::cerr << "Usage: " << std::endl
                  << argv[0]
                  << " prefix level[=1] csize[=2] threshold[=0.7] wsize[=7]"
                  << " minImageNum[=3] CPU[=8]" << std::endl
                  << std::endl
                  << "Parameters are for PMVS2 option files." << std::endl
                  << "Please refer to the following URL for the definitions:" << std::endl
                  << "http://grail.cs.washington.edu/software/pmvs/documentation.html" << std::endl;
        exit(1);
    }

    int level       = 1;
    int csize       = 2;
    float threshold = 0.7f;
    int wsize       = 7;
    int minImageNum = 3;
    int CPU         = 8;

    std::string path = argv[1];
     
    if (3 <= argc) level        = std::stoi(argv[2]);
    if (4 <= argc) csize        = std::stoi(argv[3]);
    if (5 <= argc) threshold    = std::stof(argv[4]);
    if (6 <= argc) wsize        = std::stoi(argv[5]);
    if (7 <= argc) minImageNum  = std::stoi(argv[6]);
    if (8 <= argc) CPU          = std::stoi(argv[7]);

    const int setEdge    =  0;
    const int useBound   =  0;
    const int useVisData =  1;
    const int sequence   = -1;

    std::ifstream ske_file;
    ske_file.open(path + "ske.dat");

    std::string header;
    int num_images, num_clusters;
    ske_file >> header >> num_images >> num_clusters;

    std::ofstream script_file;
#ifdef WIN32 // PM in order to get launchable script on windows, edit 2 DU
    script_file.open(path + "pmvs.bat");
#else
    script_file.open(path + "pmvs.sh");
#endif

    for (int c = 0; c < num_clusters; ++c)
    {
        std::stringstream cluster_number;
        cluster_number << std::setw(4) << std::setfill('0') << c;

        std::ofstream option_file;
#ifdef WIN32
        option_file.open(path + "option-" + cluster_number.str() + ".txt");
#else
        option_file.open(path + "option-" + cluster_number.str());
#endif

#ifdef WIN32
        script_file << R"(pmvs2 )" << path << R"( option-)" << cluster_number.str() << ".txt" << std::endl;
#else
        script_file << R"(pmvs2 )" << path << R"( option-)" << cluster_number.str() << std::endl;
#endif

        option_file << "# generated by genOption. mode 1. cluster: " << c << std::endl
                    << "level " << level << std::endl
                    << "csize " << csize << std::endl
                    << "threshold " << threshold << std::endl
                    << "wsize " << wsize << std::endl
                    << "minImageNum " << minImageNum << std::endl
                    << "CPU " << CPU << std::endl
                    << "setEdge " << setEdge << std::endl
                    << "useBound " << useBound << std::endl
                    << "useVisData " << useVisData << std::endl
                    << "sequence " << sequence << std::endl
                    << "maxAngle 10" << std::endl
                    << "quad 2.0" << std::endl;

        int timagenum, oimagenum;
        ske_file >> timagenum >> oimagenum;

        std::vector<int> timages, oimages;
        timages.resize(timagenum);
        oimages.resize(oimagenum);
        for (int i = 0; i < timagenum; ++i) ske_file >> timages[i];
        for (int i = 0; i < oimagenum; ++i) ske_file >> oimages[i];

        option_file << "timages " << timagenum << ' ';
        for (int i = 0; i < timagenum; ++i) option_file << timages[i] << ' ';
        option_file << std::endl;
        option_file << "oimages " << oimagenum << ' ';
        for (int i = 0; i < oimagenum; ++i) option_file << oimages[i] << ' ';
        option_file << std::endl;
    }

    script_file << std::endl;
}
